package app.monetization;

import lombok.Getter;
import lombok.Setter;

import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

@Getter
public class ArtistRevenue {
    @Setter
    private String name;
    private Double merchRevenue;
    private Double songRevenue;
    @Setter
    private Integer ranking;
    @Setter
    private String mostProfitableSong;
    @Setter
    private boolean wasPlayed;
    private Map<String, Double> songs;
    private static final Double ROUND_NUMBER = 100.0;

    public ArtistRevenue(final String name) {
        mostProfitableSong = "N/A";
        merchRevenue = 0.0;
        songRevenue = 0.0;
        ranking = 0;
        wasPlayed = false;
        this.name = name;
        songs = new LinkedHashMap<>();
    }

    /**
     * Adds the given revenue to the artist's merch revenue.
     *
     * @param revenue the revenue
     */
    public void addMerchRevenue(final Double revenue) {
        merchRevenue += revenue;
    }

    /**
     * Adds the given revenue to the artist's song revenue.
     *
     * @param revenue the revenue
     */
    public void addSongRevenue(final Double revenue) {
        songRevenue += revenue;
    }

    /**
     * Returns the total revenue of the artist.
     *
     * @return the total revenue
     */
    public Double getTotalRevenue() {
        return merchRevenue + songRevenue;
    }

    /**
     * Adds the given song to the artist's revenue.
     *
     * @param songName the name of the song
     * @param price revenue generated by song
     */
    public void addSong(final String songName, final Double price) {
        if (songs.containsKey(songName)) {
            songs.put(songName, songs.get(songName) + price);
        } else {
            songs.put(songName, price);
        }
    }

    /**
     * Rounds the revenue to 2 decimal places.
     */
    public void roundRevenue() {
        merchRevenue = Math.round(merchRevenue * ROUND_NUMBER) / ROUND_NUMBER;
        songRevenue = Math.round(songRevenue * ROUND_NUMBER) / ROUND_NUMBER;
    }

    /**
     * Sorts the songs by revenue.
     */
    public void sortSongs() {
        List<Map.Entry<String, Double>> sortedSongs = songs.entrySet().stream()
                .sorted(Map.Entry.<String, Double>comparingByValue().reversed()
                        .thenComparing(Map.Entry.comparingByKey()))
                .toList();
        songs = new LinkedHashMap<>();
        for (Map.Entry<String, Double> entry : sortedSongs) {
            songs.put(entry.getKey(), entry.getValue());
        }
        if (sortedSongs.size() > 0) {
            mostProfitableSong = sortedSongs.get(0).getKey();
        }
    }
}
